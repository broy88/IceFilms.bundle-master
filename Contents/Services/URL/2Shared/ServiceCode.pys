import re, urlparse, cgi, urllib, urllib2from BeautifulSoup import BeautifulSoupUSER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/534.51.22 (KHTML, like Gecko) Version/5.1.1 Safari/534.51.22'def NormalizeURL(url):	#Log("*********** In 2Shared NormalizeURL")		# Deal with special providerInfo URL built up by IceFilms plugin to return	# info about this provider. For all other normal URLs, do nothing. 	if ("providerinfo" in url):			try:			show = Prefs["show_2shared"]		except Exception, ex:			show = True					if (show):			return url + "?visible=true"		else:			return url				else:		return url	def MetadataObjectForURL(url): 	#Log('In MetadataObjectForURL for 2Shared (' + url + ')')		video = VideoClipObject(		title = '2Shared Redirect Page',		summary = '2Shared Redirect Page',		thumb = None,	)		return video	def MediaObjectsForURL(url):	ret = []	ret.append(		MediaObject(			parts = [PartObject(key=Callback(PlayVideo, url=url))],		)	)	  	return ret  	@indirectdef PlayVideo(url):	# Request initial page...	#Log("------------------------------------------------------------------------------")	#Log("Requesting: " + url)		try:		request = urllib2.Request(url)		request.add_header('User-agent', USER_AGENT)		response = urllib2.urlopen(request)			soup = BeautifulSoup(response.read())	except Exception, ex:		return LogProviderError("Error whilst retrieving initial provider page (" + url + ")", ex)		# Look for any errors on the page.	errors = soup.find('div',{'class':'triangle-border'})	if (errors is not None):		return LogProviderError("Provider reachable but has returned following error: " + errors.text)			try:		final_url = re.findall("window.location\s*=\s*'(.*)';",str(soup))[0]	except Exception, ex:		return LogProviderError("Could not find final url on page. Has something changed?", ex)		Log("finalURL: " + final_url)		return ObjectContainer(		objects = [			VideoClipObject(				items = [					MediaObject(						parts = [PartObject(key=final_url)],					)				]			)		]	)def LogProviderError(msg="", ex=None):	Log("************************** PROVIDER ERROR: " + msg)	raise Exception(msg)	return []