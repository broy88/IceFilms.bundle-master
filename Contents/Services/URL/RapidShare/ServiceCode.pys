import re, urlparse, cgi, time, urllib, urllib2from BeautifulSoup import BeautifulSoupUSER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/534.51.22 (KHTML, like Gecko) Version/5.1.1 Safari/534.51.22'RS_API_HOST = "https://api.rapidshare.com/"RS_API_PATH = "cgi-bin/rsapi.cgi"def NormalizeURL(url):	#Log("*********** In RapidShare normalizeURL")		# Deal with special providerInfo URL built up by IceFilms plugin to return	# info about this provider. For all other normal URLs, do nothing. 	if ("providerinfo" in url):			try:			show = Prefs["rs_show"]		except Exception, ex:			show = True					if (show):			return url + "&visible=true"		else:			return url				else:		return url		def MetadataObjectForURL(url): 	#Log('In MetadataObjectForURL for VidHog (' + url + ')')		video = VideoClipObject(		title = 'RapidShare Redirect Page',		summary = 'RapidShare Redirect Page',		thumb = None,	)		return video		################################################################################ Get some info about the item we're about to play including finalRedirect URL# and delay to wait for before file can be played (if any).def MediaObjectsForURL(url):	ret = []	ret.append(		MediaObject(			parts = [PartObject(key=Callback(PlayVideo, url=url))],		)	)	  	return ret@indirectdef PlayVideo(url):	#Log(Dict[ACCOUNT_STATUS_KEY])	#Log(mediaInfo.title)	#Log(url)		parse = urlparse.urlparse(url)	scheme = parse.scheme	host = parse.netloc	path = parse.path.split("/")		auth_url = RS_API_HOST + RS_API_PATH + "?sub=download&try=1"	auth_url += "&fileid=" + path[2]	auth_url += "&filename=" + path[3]		account_status = GetAccountType()		if (account_status == "PRO"):		auth_url += "&login=" + Prefs['rs_username']		auth_url += "&password=" + Prefs['rs_password']		# Get auth code.	info = HTTP.Request(		auth_url,		cacheTime=0	).content[3:].split(",")		#Log(info)		# Build up final URL	finalURL = info[0] + "/" + RS_API_PATH + "?sub=download" + "&fileid=" + path[2] + "&filename=" + path[3] 		if (account_status == "PRO"):		finalURL = "https://" + finalURL		finalURL += "&login=" + Prefs['rs_username']		finalURL += "&password=" + Prefs['rs_password']	else:		finalURL = "http://" + finalURL + "&dlauth=" + info[1]		Log("Delay: " + info[2])		Log(finalURL)		# { 'delay': int(info[2]), 'finalURL':finalURL }		return ObjectContainer(		objects = [			VideoClipObject(				items = [					MediaObject(						parts = [PartObject(key=finalURL)],					)				]			)		]	)def GetAccountType():	accountStatus="NONE"		Log(Prefs['rs_username'])	Log(Prefs['rs_password'])	# Only when username and password are set	if (Prefs['rs_username'] and Prefs['rs_password']):		try:			accountInfo = HTTP.Request(				RS_API_HOST + RS_API_PATH + "?sub=getaccountdetails&login=" + Prefs['rs_username'] + "&password=" +  Prefs['rs_password'],				cacheTime = 0			).content						if (accountInfo.find("ERROR:") == 0):				Log("Error encountered whilst trying to login to RS. Error is:\n" + accountInfo)				return accountStatus						billed = re.search("billeduntil=(\d*)",accountInfo)						if (billed is None or billed.group(1) is None):				Log("Error encountered whilst trying to retrieve RS details. Could not find billeduntil element")				return accountStatus						if (datetime.date.fromtimestamp(int(billed.group(1))) >= datetime.date.today()):				accountStatus = "PRO"			else:				accountStatus = "FREE"						except:			Log.Exception("Login Failed")	Log(accountStatus)	return accountStatus	