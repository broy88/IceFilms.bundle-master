import re, urlparse, cgi, urllib, urllib2from BeautifulSoup import BeautifulSoupUSER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/534.51.22 (KHTML, like Gecko) Version/5.1.1 Safari/534.51.22'def NormalizeURL(url):	#Log("*********** In ShareBees NormalizeURL")		# Deal with special providerInfo URL built up by IceFilms plugin to return	# info about this provider. For all other normal URLs, do nothing. 	if ("providerinfo" in url):			try:			show = Prefs["show_sharebees"]		except Exception, ex:			show = True					if (show):			return url + "&visible=true"		else:			return url				else:		return url	def MetadataObjectForURL(url): 	#Log('In MetadataObjectForURL for ShareBees (' + url + ')')		video = VideoClipObject(		title = 'ShareBees Redirect Page',		summary = 'ShareBees Redirect Page',		thumb = None,	)		return video	def MediaObjectsForURL(url):	ret = []	ret.append(		MediaObject(			parts = [PartObject(key=Callback(PlayVideo, url=url))],		)	)	  	return ret@indirectdef PlayVideo(url):	# Request initial page...	Log("------------------------------------------------------------------------------")	Log("Requesting: " + url)		request = urllib2.Request(url)	request.add_header('User-agent', USER_AGENT)	response = urllib2.urlopen(request)		soup = BeautifulSoup(response.read())		#Log(str(soup))		# Deal with initial page.	# Extract out these form elements...	formElems = ['op', 'id', 'fname', 'method_free', 'referer', 'usr_login']	params = {}		for formElem in formElems:		formElemVal =  soup.find('input', {'name' : formElem })['value']		params[formElem] = formElemVal			# Submit form with extracted elements.	#Log("****************************************************************************")	#Log("Requesting: " + url)	#Log("Params: " + str(params))		request = urllib2.Request(url, urllib.urlencode(params))	request.add_header('User-agent', USER_AGENT)	request.add_header('Referer', url)	response = urllib2.urlopen(request)		soup = BeautifulSoup(response.read())	#Log(str(soup))		# Look for any errors from provider.	errors = soup.find('div',{ 'class':'err'})	if (errors is not None):		return LogProviderError("Provider reachable but has returned following error: " + errors.text)		# Deal with download page...	# Extract out these form elements...	form = soup.find('form', { 'name': 'F1' })	formElems = ['down_direct', 'id', 'method_free', 'method_premium', 'op', 'rand', 'referer']	params = {}		for formElem in formElems:		formElemVal =  form.find('input', {'name' : formElem })['value']		params[formElem] = formElemVal		#Log("****************************************************************************")	#Log("Requesting: " + url)	#Log("Params: " + str(params))		request = urllib2.Request(url, urllib.urlencode(params))	request.add_header('User-agent', USER_AGENT)	request.add_header('Referer', url)	response = urllib2.urlopen(request)		soup = BeautifulSoup(response.read())		# Collect redirect URL and return it.	final_url = soup.find('div',{ 'class': 'content_mdl' }).span.a['href']		Log("final url: " + final_url)		return ObjectContainer(		objects = [			VideoClipObject(				items = [					MediaObject(						parts = [PartObject(key=final_url)],					)				]			)		]	)  	return retdef LogProviderError(msg="", ex=None):	Log("************************** PROVIDER ERROR: " + msg)	raise Exception(msg)	return []